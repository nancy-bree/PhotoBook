@{
    Layout = null;
}

@model PhotoBook.Web.Models.UploadModel

<!doctype html>
 
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>jQuery UI Autocomplete - Multiple values</title>
  <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css" />
  <script src="@Url.Content("~/Scripts/jquery-1.9.1.js")"></script>
  <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
</head>
<body>
 @using (Html.BeginForm("Index", "Photo", FormMethod.Post, new { role = "form", @class = "col-md-6", enctype = "multipart/form-data" }))
 {
    @Html.ValidationSummary(true)
    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(m => m.Photo)
        <input type="file" name="Photo" id="Photo" class="form-control" accept="image/jpeg" /> 
        @Html.ValidationMessageFor(m => m.Photo) 
    </div>
    
    <div class="form-group">
        @Html.LabelFor(m => m.Description)
        @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
    </div>


<div class="form-group">
        @Html.LabelFor(m => m.Tags)
        @Html.TextBoxFor(m => m.Tags, new { @class = "form-control" })
    </div>
     
     <input type="submit" value="Загрузить" class="btn btn-default" /> 
 }
 
<script>
    $(function () {
        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        $("#Tags")
          // don't navigate away from the field on tab when selecting an item
          .bind("keydown", function (event) {
              if (event.keyCode === $.ui.keyCode.TAB &&
                  $(this).data("ui-autocomplete").menu.active) {
                  event.preventDefault();
              }
          })
          .autocomplete({
              source: function (request, response) {
                  $.getJSON("/Tag/GetTags", {
                      term: extractLast(request.term)
                  }, response);
              },
              search: function () {
                  // custom minLength
                  var term = extractLast(this.value);
                  if (term.length < 2) {
                      return false;
                  }
              },
              focus: function () {
                  // prevent value inserted on focus
                  return false;
              },
              select: function (event, ui) {
                  var terms = split(this.value);
                  // remove the current input
                  terms.pop();
                  // add the selected item
                  terms.push(ui.item.value);
                  // add placeholder to get the comma-and-space at the end
                  terms.push("");
                  this.value = terms.join(",");
                  return false;
              }
          });
    });
  </script>
 
</body>
</html>